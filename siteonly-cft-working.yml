#  (c) 2020 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This AWS Content is provided subject to the terms of the AWS
#   Customer Agreement available at https://aws.amazon.com/agreement or other writtenagreement between Customer
#   and Amazon Web Services, Inc.
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each
  AZ), and default routes for them in the private subnets.
Parameters:
  pKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Enter the name of an already existing key pair.
    Default: nvirginiaskangnohkey
  pVPCName:
    Type: String
    Description: Enter the name of the VPC you will be creating
    Default: DaksVPC
  pCertificateArn:
    Type: String
    Description: Enter Arn of the certificate at hand
    Default: arn:aws:acm:us-east-1:171602812093:certificate/0e4b6f74-17dd-4660-b0c5-0fc2b0d21635
  pInstanceType:
    Type: String
    Description: Enter an instance type for your EC2 instance.
    AllowedValues:
      - t2.small
      - t3.small
      - t3.medium
      - t2.xlarge
      - t3a.large
      - m3.medium
      - m4.large
    Default: t3.small
  pEnvironmentName:
    Type: String
    Description: An environment name that is prefixed to resource names
    Default: DaksProd
  pASGRoleName:
    Type: String
    Description: Enter the name for the IAM role name for instances
    Default: DaksIAMRole
  pInternetGatewayName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: DaksIGW
  pBlacklistIPset:
    Description: Enter the IP address set for the blacklist rule
    Type: String
    Default: 65.127.78.58/32
  pLoadBalancerName:
    Description: Enter the name of the Loadbalancer
    Type: String
    Default: DaksELB
  pTargetGroupName:
    Description: Enter a name for the Targetgroup
    Type: String
    Default: DaksTG
  pASGLaunchConfigurationName:
    Description: Enter a name for the Launch configuration
    Type: String
    Default: DaksLC
  pVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.190.0.0/16
  pPublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.190.10.0/24
  pPublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.190.11.0/24
  pPrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.190.20.0/24
  pPrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.190.21.0/24
  pPrivateSubnet3CIDR:
    Description:
      Please enter the IP range (CIDR notation) for the second private subnet in the
      first Availability Zone
    Type: String
    Default: 10.190.30.0/24
  pPrivateSubnet4CIDR:
    Description:
      Please enter the IP range (CIDR notation) for the second private subnet in the
      second Availability Zone
    Type: String
    Default: 10.190.31.0/24
  pDomainName:
    Type: String
    Description: Enter domain name for Public hosted zone
    Default: skangnohgroup.net
  pSubDomainName:
    Type: String
    Description: Enter sub domain name for record set
    Default: skangnohgroup.net
  pPublicHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Enter an Amazon Route 53 hosted zone ID, such as Z23YXV4OVPL04A.
    Default: Z2HD1W4WRM2U3P
  pIPRangeSSH:
    Description: >-
      [Required] Set the IP or IP range for SSH connectivity to machine ;
      127.0.0.1/32 is configured by default to disable remote SSH access. Set
      this to 0.0.0.0/0 to access secure shell from any IP.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 127.0.0.1/32
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: Your IP Range for SSH must be a valid IP CIDR range of the form x.x.x.x/x.
  pIPRangeApplication:
    Description: >-
      [Required] Set this to 0.0.0.0/0 to allow anyone on the internet to access
      the application, and 127.0.0.1/32 to disable public access to the
      application. You can also configure specific IP address or IP Range access
      here.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: >-
      This value cannot be empty. Set this to 0.0.0.0/0 to allow anyone on the
      internet to access the application, and 127.0.0.1/32 to disable public
      access to the application.
    Default: 0.0.0.0/0
  pInstancesDataDiskType:
    Description: Select the disk type for the EC2 instance.
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
  pInstancesDataDiskSize:
    Description: 'Disk size in GB, this must be between 1 and 1024 GB.'
    Type: Number
    MinValue: '1'
    MaxValue: '1024'
    Default: '10'
    ConstraintDescription: Your Data Disk Instance size must be between 1 and 1024 GB.
  pApplicationPassword:
    Description: >-
      [Required] Admin password for WordPress - Between 8-32 characters; Include
      at least one digit, upper case letter and no special characters.
    Default: Susane85
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: '(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])^([a-zA-Z0-9]{8,32})$'
    ConstraintDescription: >-
      Your password must be between 8 and 32 characters, include at least one.
      digit, upper case letter and no special characters.
    NoEcho: true
  pApplicationUsername:
    Description: >-
      IMPORTANT: This is the admin username you will use to log into the
      application, and the password you set below will correspond to this admin
      username. This is a default value, and can only be changed after you log
      in.
    Type: String
    Default: user
    AllowedValues:
      - user
  pAvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: '[Required] Primary Availability Zone for your deployment.'
    Default: us-east-1a
    AllowedPattern: ^.+$
    ConstraintDescription: The Availability Zone cannot be blank.
  pSecondAvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: >-
      [Required] This RDS deployment requires two availability zones. You must
      select the Additional Availability Zone to be different than the Primary
      Availability Zone.
    Default: us-east-1b
    AllowedPattern: ^.+$
    ConstraintDescription: The Additional Availability Zone cannot be blank.
  pDatabasePassword:
    Description: >-
      [Required] Aurora database admin password for WordPress - Between 8-32
      characters; Include at least one digit, upper case letter and no special
      characters. Please check that the selected instance type is available in
      your region.
    Default: Susane85
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: '(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])^([a-zA-Z0-9]{8,32})$'
    ConstraintDescription: >-
      Your database admin password must be between 8 and 32 characters, include
      at least one. digit, upper case letter and no special characters.
    NoEcho: true
  pDatabaseInstanceClass:
    Description: Select the instance type for your application database.
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.r5.12xlarge
      - db.t2.small
      - db.t2.medium
      - db.t3.small
      - db.t3.medium
  pMultiAZ:
    Description: Create replica in a different Availability zone.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Multi-AZ must be true or false.
  pActivateSqlInjectionProtectionParam:
    Type: String
    Default: 'yes'
  pActivateCrossSiteScriptingProtectionParam:
    Type: String
    Default: 'yes'
  pActivateReputationListsProtectionParam:
    Type: String
    Default: 'yes'
  pActivateBadBotProtectionParam:
    Type: String
    Default: 'yes'
  pBastionASGLaunchConfigurationName:
    Description: Launch configuration name for Bastion host
    Type: String
    Default: DaksBastionLC

Conditions:
  SqlInjectionProtectionActivated: !Equals
    - !Ref pActivateSqlInjectionProtectionParam
    - 'yes'
  CrossSiteScriptingProtectionActivated: !Equals
    - !Ref pActivateCrossSiteScriptingProtectionParam
    - 'yes'
  AlwaysTrue: !Equals
    - true
    - true
  AddIPRangeSSH: !Not
    - !Equals
      - !Ref pIPRangeSSH
      - ''
  AddIPRangeApplication: !Not
    - !Equals
      - !Ref pIPRangeApplication
      - ''
  AuroraMultiAZ: !Equals
    - !Ref pMultiAZ
    - 'true'
  ReputationListsProtectionActivated: !Equals
    - !Ref pActivateReputationListsProtectionParam
    - 'yes'
  BadBotProtectionActivated: !Equals
    - !Ref pActivateBadBotProtectionParam
    - 'yes'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-00e692dfc46181328
    us-east-2:
      AMI: ami-0a2f497982b6dda4d
    us-gov-east-1:
      AMI: ami-117a9860
    us-west-1:
      AMI: ami-0c7c33118d7e0bff4
    us-gov-west-1:
      AMI: ami-eda98a8c
    us-west-2:
      AMI: ami-002415bcc6084efa9
    ca-central-1:
      AMI: ami-0b7eb5e6ba1d12874
    eu-central-1:
      AMI: ami-07ff689e6b0da50f2
    eu-west-1:
      AMI: ami-06448a3d672c88904
    eu-west-2:
      AMI: ami-0fcbdc75f74f95820
    eu-west-3:
      AMI: ami-0df6fff7f66ec668f
    eu-north-1:
      AMI: ami-0f051c5eb92a45591
    ap-southeast-1:
      AMI: ami-013160b5f152c449d
    ap-southeast-2:
      AMI: ami-094c7e0c1787eab79
    ap-south-1:
      AMI: ami-01a32ec70b5179140
    ap-northeast-1:
      AMI: ami-06d669313647d1b02
    ap-northeast-2:
      AMI: ami-060e49472ae1e9982

Resources:
  rVPC: #Creates a VPC for Daks
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref pVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref pVPCName
  rInternetGateway: #Creates an IGW for the VPC
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref pInternetGatewayName
  rInternetGatewayAttachment: # Attach IGW to VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC
  rPublicSubnet1: # create a public subnet for the first AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref pPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Public Subnet (AZ1)'
  rPublicSubnet2: # create a public subnet for the second AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref pPublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Public Subnet (AZ2)'
  rPrivateSubnet1: # create a private subnet for the first AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref pPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Subnet (AZ1)'
  rPrivateSubnet2: # create a private subnet for the second AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref pPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Subnet (AZ2)'
  rPrivateSubnet3: # create a second private subnet for the first AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref pPrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Subnet (AZ1)'
  rPrivateSubnet4: # create a second private subnet for the second AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref pPrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Subnet (AZ2)'
  rNatGateway1EIP: # creates an EIP for NatGateway in the public subnet of first AZ
    Type: 'AWS::EC2::EIP'
    DependsOn: rInternetGatewayAttachment
    Properties:
      Domain: vpc
  rNatGateway1: # creates a NatGateway in the public subnet of the first AZ
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt rNatGateway1EIP.AllocationId
      SubnetId: !Ref rPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} AZ1 NatGateway'
  rNatGateway2EIP: # creates an EIP for NatGateway in the public subnet of second AZ
    Type: 'AWS::EC2::EIP'
    DependsOn: rInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} AZ2 EIP'
  rNatGateway2: # creates a NatGateway in the public subnet of the Second AZ
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt rNatGateway2EIP.AllocationId
      SubnetId: !Ref rPublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} AZ2 NatGateway'
  rPublicRouteTable: # Create a Route table for public subnets
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Public Routes'
  rDefaultPublicRoute: # Create a default route for the public route table
    Type: 'AWS::EC2::Route'
    DependsOn: rInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  rPublicSubnet1RouteTableAssociation: #Associate the Public routeTable to publicSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnet1
  rPublicSubnet2RouteTableAssociation: #Associate the Public routeTable to publicSubnet2
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnet2
  rPrivateRouteTable1: #Creates a private RouteTable table for private Subnet1 in AZ1
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Routes (AZ1)'
  rDefaultPrivateRoute1: #Create a default route for private RT1 in AZ1
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGateway1
  rPrivateSubnet1RouteTableAssociation: #Associate private subnet in AZ2 to the private RouteTable1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rPrivateRouteTable1
      SubnetId: !Ref rPrivateSubnet1
  rPrivateRouteTable2: #Creates a private RouteTable for the private subnet2 in AZ2
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Private Routes (AZ2)'
  rDefaultPrivateRoute2: #Creates a default route for the private RT2 in AZ2
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGateway1
  rPrivateSubnet2RouteTableAssociation: #Associate private subnet in AZ2 to the private RouteTable1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rPrivateRouteTable2
      SubnetId: !Ref rPrivateSubnet2
  rAppSG: #ELB Security group allowing port 80 and 443 from the load balancer
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB security group for port 80 and 443
      SecurityGroupIngress:
        - !If
          - AddIPRangeSSH
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref rBastionASGSG
          - 'AWS::NoValue'
        - !If
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref rFrontendSecurityGroup
          - 'AWS::NoValue'
        - !If
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !Ref rFrontendSecurityGroup
          - 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} AppSeverSG'
      VpcId: !Ref rVPC
  rLoadBalancer: # Creates an internet facing application load balancer
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref pLoadBalancerName
      Scheme: internet-facing
      Subnets:
        - !Ref rPublicSubnet1
        - !Ref rPublicSubnet2
      SecurityGroups:
        - !Ref rFrontendSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} DaksELB'
  rTargetGroup: # Creates a target group for the application load balancer
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 100
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Name: !Ref pTargetGroupName
      Port: 80
      Protocol: HTTP
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} TG'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: 'lb_cookie'
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '604800'
      TargetType: instance
      UnhealthyThresholdCount: 3
  rHTTPListener: # Specifies a HTTP listener for an Application Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rTargetGroup
          Type: forward
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 80
      Protocol: HTTP
  rHTTPSListener: # Specifies a HTTPs listener for an Application Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref pCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 443
      Protocol: HTTPS
  rASGLaunchConfiguration: #Create launch configuration for application ASGS
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn:
      - rDatabaseInstance
      - rInternetGatewayAttachment
    Properties:
      AssociatePublicIpAddress: 'false'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref pInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvdc
          Ebs:
            VolumeType: !Ref pInstancesDataDiskType
            VolumeSize: !Ref pInstancesDataDiskSize
      KeyName: !Ref pKeyPair
      LaunchConfigurationName: !Ref pASGLaunchConfigurationName
      IamInstanceProfile: !Ref rASGInstanceProfile
      SecurityGroups:
        - !Ref rAppSG
        - !Ref rSharedSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          - #PROVISIONER_PEER_PASSWORD_INPUT=${AWS::AccountId} ${AWS::StackId} ${AWS::Region}

          - #PROVISIONER_PEER_PASSWORD=${pDatabasePassword}

          - #PROVISIONER_SHARED_UNIQUE_ID_INPUT=${AWS::AccountId} ${AWS::StackId} ${AWS::Region}

          - #PROVISIONER_CFN_RESOURCE=Machine

          - #PROVISIONER_CFN_STACK=${AWS::StackName}

          - #PROVISIONER_CFN_REGION=${AWS::Region}

          - #PROVISIONER_DATA_DISK=/dev/xvdc

          - #PROVISIONER_TIER=frontend

          - #PROVISIONER_PEER_ADDRESS=${rDatabaseCluster}${!GetAtt Endpoint.Address}

          - #PROVISIONER_APP_PASSWORD=${pApplicationPassword}

          #cloud-config
          write_files:
            - path: /tmp/config.json
              permissions: 0644
              owner: root
              content: |
                {
                  "agent": {
                      "metrics_collection_interval": 60,
                      "run_as_user": "root"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "collectd": {
                        "metrics_aggregation_interval": 60
                      },
                      "disk": {
                        "measurement":[
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement":[
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      }
                    }
                  }
                }
          runcmd:
            - wget -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb
            - sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
            - sudo apt-get update && sudo apt-get install collectd -y
            - sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/tmp/config.json -s

  rASGInstanceProfile: # Creates an instance profile for the launch configuration
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${rASGRole}-profile'
      Roles:
        - !Ref rASGRole
  rASGRole: # Creates an IAM role to be associated with the instance profile
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      RoleName: !Ref pASGRoleName
  rBastionASGSG: # Create Security group for Bastion Host to allow SSH
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'BastionSG'
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} BastionSG'
      VpcId: !Ref rVPC
  rBastionASGLaunchConfiguration: # Creates the launch configuration for the BastionASG
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref pInstanceType
      KeyName: !Ref pKeyPair
      LaunchConfigurationName: !Ref pBastionASGLaunchConfigurationName
      IamInstanceProfile: !Ref rASGInstanceProfile
      SecurityGroups:
        - !Ref rBastionASGSG
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash

          rpm -Uvh
          https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource
          rBastionASGLaunchConfiguration --region ${AWS::Region} --configsets default

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource
          rBastionASGLaunchConfiguration --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"]],
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      }
                    }
                  }
                }
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a stop
            02_start_service:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a fetch-config -m ec2 -c
                file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
                -s
        01_setupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.rBastionASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent

                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId}
                --resource rBastionASGLaunchConfiguration --region ${AWS::Region}
                --configsets UpdateEnvironment

                runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
  rBastionASG: # Creates an autoscaling group for the Bastion hosts
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AvailabilityZones:
        - 'Fn::GetAtt':
            - rPublicSubnet1
            - AvailabilityZone
        - 'Fn::GetAtt':
            - rPublicSubnet2
            - AvailabilityZone
      LaunchConfigurationName:
        Ref: rBastionASGLaunchConfiguration
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub '${pEnvironmentName} BastionASG'
      VPCZoneIdentifier:
        - !Ref rPublicSubnet1
        - !Ref rPublicSubnet2
      MaxSize: '3'
      MinSize: '1'
  rAppASG: # Creates internal autoscaling group for the application instances
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AvailabilityZones:
        - 'Fn::GetAtt':
            - rPrivateSubnet1
            - AvailabilityZone
        - 'Fn::GetAtt':
            - rPrivateSubnet2
            - AvailabilityZone
      DesiredCapacity: '2'
      LaunchConfigurationName:
        Ref: rASGLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref rPrivateSubnet1
        - !Ref rPrivateSubnet2
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub '${pEnvironmentName} AppASG'
      TargetGroupARNs:
        - !Ref rTargetGroup
      MaxSize: '3'
      MinSize: '1'
  rMemoryAlarmLow: # Memory alarm to trigger scaleDown policy
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 30
      AlarmDescription: Go in Alarm if memory is lower than 30% for 60 seconds
      Period: 60
      AlarmActions:
        - Ref: rScaleDownPolicy
      Namespace: CWAgent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAppASG
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: mem_used_percent
  rMemoryAlarmHigh: # Memory alarm to trigger scaleUp policy
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 70
      AlarmDescription: Go in Alarm if memory is higher than 70% for 60 seconds
      Period: 60
      AlarmActions:
        - Ref: rScaleUpPolicy
      Namespace: CWAgent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAppASG
      ComparisonOperator: GreaterThanThreshold
      MetricName: mem_used_percent
  rScaleUpPolicy: # Creates a simple scaleUp policy
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAppASG
      Cooldown: '1'
      ScalingAdjustment: 1
  rScaleDownPolicy: # Creates a simple scaleUp policy
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAppASG
      Cooldown: '1'
      ScalingAdjustment: -1

  rSharedSecurityGroup: # Create security group for internal communication
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for the internal communications
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} DB Shared SG'
      VpcId: !Ref rVPC
  rSharedSecurityGroupIngress0: # Create Ingress rule for shared security group
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: rSharedSecurityGroup
    Properties:
      IpProtocol: '-1'
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !GetAtt
        - rSharedSecurityGroup
        - GroupId
      GroupId: !GetAtt
        - rSharedSecurityGroup
        - GroupId
  rFrontendSecurityGroup: # Security group for the public facing load balancer
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Frontend instance security group
      SecurityGroupIngress:
        - !If
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref pIPRangeApplication
          - 'AWS::NoValue'
        - !If
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref pIPRangeApplication
          - 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} FrontendSG'
      VpcId: !Ref rVPC
  rDatabaseSecurityGroup: # Security group for Aurora DB cluster
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Database instance security group
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref rAppSG
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} Database SG'

  rDatabaseSubnetGroup: # Creates a subnetgroup to associate with AuroraDB cluster
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Database instance subnet group.
      SubnetIds:
        - !Ref rPrivateSubnet3
        - !Ref rPrivateSubnet4
  rDatabaseClusterParameterGroup: # Creates a parameter group for AuroraDB cluster to manage DB configuration
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: Configure database character set and collation.
      Family: aurora5.6
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        character_set_database: utf8mb4
        collation_connection: utf8mb4_general_ci
        collation_server: utf8mb4_general_ci
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} DB ParameterGP'
  rDatabaseCluster: # Creates an Aurora cluster
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora
      DBSubnetGroupName: !Ref rDatabaseSubnetGroup
      MasterUsername: root
      MasterUserPassword: !Ref pDatabasePassword
      DBClusterParameterGroupName: !Ref rDatabaseClusterParameterGroup
      KmsKeyId: arn:aws:kms:us-east-1:171602812093:key/4f35ef30-f1a9-44a3-906d-9bd77d138346
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref rDatabaseSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName} DBCluster'
  rDatabaseInstance: # Create an AuroraDB instance
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref rDatabaseCluster
      DBInstanceIdentifier: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-DatabaseMachine'
      DBSubnetGroupName: !Ref rDatabaseSubnetGroup
      DBInstanceClass: !Ref pDatabaseInstanceClass
      Tags:
        - Value: wordpress-database
          Key: Name
  rDatabaseReplicaInstance: # Aurora DB replica instance
    Type: 'AWS::RDS::DBInstance'
    Condition: AuroraMultiAZ
    DeletionPolicy: Delete
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref rDatabaseCluster
      DBInstanceIdentifier: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-DatabaseReplicaMachine'
      DBSubnetGroupName: !Ref rDatabaseSubnetGroup
      DBInstanceClass: !Ref pDatabaseInstanceClass
      Tags:
        - Value: wordpress-database-replica
          Key: Name

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref rVPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref rPublicSubnet1
        - !Ref rPublicSubnet2
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join
      - ','
      - - !Ref rPrivateSubnet1
        - !Ref rPrivateSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref rPublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref rPublicSubnet2
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref rPrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref rPrivateSubnet2
