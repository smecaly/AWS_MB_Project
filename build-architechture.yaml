AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each
  AZ), and default routes for them in the private subnets.
Parameters:
  SSHKey:
    Type: String
    Description: Please enter the private key to connect to instances
    Default: nvirginiaskangnohkey
  ASGRoleName:
    Type: String
    Description: IAM role name for instances
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: prod
  InternetGatewayName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: IGW
  LoadBalancerName:
    Description: Loadbalancer name
    Type: String
    Default: ELB
  TargetGroupName:
    Description: Targetgroup name
    Type: String
    Default: TG
  ASGLaunchConfigurationName:
    Description: Launch configuration name
    Type: String
    Default: LC
  SecurityGroupName:
    Description: Security group name
    Type: String
    Default: SG
  S3BucketName:
    Description: S3 bucket name
    Type: String
    Default: sansu3351
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.190.0.0/16
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.190.10.0/24
  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.190.11.0/24
  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.190.20.0/24
  PrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.190.21.0/24
Mappings:
  RegionMap:
    eu-west-1:
      HVM64: ami-030dbca661d402413
    eu-west-2:
      HVM64: ami-0009a33f033d8b7b6
    eu-west-3:
      HVM64: ami-0ebb3a801d5fb8b9b
    eu-central-1:
      HVM64: ami-0ebe657bc328d4e82
    us-west-2:
      HVM64: ami-04590e7389a6e577c
    us-west-1:
      HVM64: ami-015954d5e5548d13b
    us-east-2:
      HVM64: ami-0cb72367e98845d43
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
    ap-south-1:
      HVM64: ami-00e782930f1c3dbc7
    ap-northeast-2:
      HVM64: ami-08ab3f7e72215fe91
    ap-northeast-1:
      HVM64: ami-00d101850e971728d
    ap-southeast-2:
      HVM64: ami-0fb7513bcdc525c3b
    ap-southeast-1:
      HVM64: ami-0b5a47f8865280111
    ca-central-1:
      HVM64: ami-08a9b721ecc5b0a53
    sa-east-1:
      HVM64: ami-058141e091292ecf0
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f26a425f-3f9a-41bc-857e-acb431b83cf8
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref InternetGatewayName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06d18584-ca53-42af-af5d-c8f0e3b61e5f
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 19169680-a4b7-4261-886e-1acddb161908
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 62c95d3a-9f19-493c-935b-d999b5153c16
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 95c4fcd6-033e-4cf4-8ddb-d9184209f9fd
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a47997fe-05a9-4256-8a34-f25a4c1e4eb6
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0011e788-a4bb-4898-abd3-637a8f49672f
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cf1e2911-cbeb-47c2-9528-9ac4c985f2f0
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a9ff3f18-4a15-4432-89e3-0d125246d2b7
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a08d7e12-205f-45df-aae0-92ec242f4ed1
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7668360c-71d4-480b-9cf0-6cacdf256292
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 409bb47b-930b-40b0-bfac-984a0834520a
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e39aede9-aa38-4c72-ab48-66ccc87d7988
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fcd96e42-aa14-44bf-826b-a7ca9301e5b7
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 70cd1dc2-4be5-45cf-b7cf-274140171caf
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 72ad5623-f5d2-4288-9381-c112089238b7
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 668d8373-3610-4429-a59e-b04fa092b520
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c02b8bb4-8fd8-4f30-b2ed-041bcbfd920c
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: efcd7e65-59ff-43ad-9de2-06abcc6bc926
  NoIngressSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4d431869-500a-4ab7-9563-ec76e9215f24
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 63963e57-1879-45d1-b8ca-ef2030b75f95
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Ref TargetGroupName
      Port: 1000
      Protocol: HTTP
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6660276b-51c3-4606-b3a4-6718427f4bfe
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '8000'
      Protocol: HTTP
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8042b75d-8b23-4695-ba18-b59305a9fe24
  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: Referer
            Values:
              - 'https://www.amazon.com/'
      ListenerArn: !Ref Listener
      Priority: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6177fbba-9cbd-4c48-87df-e04a90d986a6
  ASGLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref SSHKey
      LaunchConfigurationName: !Ref ASGLaunchConfigurationName
      IamInstanceProfile: !Ref ASGInstanceProfile
      SecurityGroups:
        - !Ref ASGSG
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash

          rpm -Uvh
          https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource
          ASGLaunchConfiguration --region ${AWS::Region} --configsets default

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource
          ASGLaunchConfiguration --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"]],
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      }
                    }
                  }
                }
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a stop
            02_start_service:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a fetch-config -m ec2 -c
                file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                -s
        01_setupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.ASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent

                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId}
                --resource ASGLaunchConfiguration --region ${AWS::Region}
                --configsets UpdateEnvironment

                runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
      'AWS::CloudFormation::Designer':
        id: 8ea5a632-01f2-4008-9a44-a66949888711
  ASGInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: AGInstanceProfile
      Roles:
        - !Ref ASGRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: afba8fa8-30ba-42cb-8aec-8950205c0d52
  ASGRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      RoleName: !Ref ASGRoleName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2b90cce9-a1ab-4eaf-b92a-9d79f7fbc2cb
  ASGSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Ref SecurityGroupName
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f57613d6-d694-4f62-96c8-1891553cdae2
  ASG:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - 'Fn::GetAtt':
            - PublicSubnet1
            - AvailabilityZone
        - 'Fn::GetAtt':
            - PublicSubnet2
            - AvailabilityZone
      LaunchConfigurationName:
        Ref: ASGLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MaxSize: '3'
      MinSize: '1'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 75ea7819-001a-49fe-b3eb-bfced921f3c2
  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      Cooldown: '1'
      ScalingAdjustment: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 215e9132-4270-47cd-af00-4ea989144dd7
  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      Cooldown: '1'
      ScalingAdjustment: -1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c1e5da53-b7a5-4cd0-af70-430f9d0493d8
  MemoryAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 70
      AlarmDescription: Go in Alarm is memory is higher than 70% for 60 seconds
      Period: 60
      AlarmActions:
        - Ref: ScaleUpPolicy
      Namespace: CWAgent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG
      ComparisonOperator: GreaterThanThreshold
      MetricName: mem_used_percent
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6b52492b-0ccb-43ee-91c4-129463bb8b42
  MemoryAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 30
      AlarmDescription: Go in Alarm is memory is lower than 30% for 60 seconds
      Period: 60
      AlarmActions:
        - Ref: ScaleDownPolicy
      Namespace: CWAgent
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: mem_used_percent
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e18ca037-8949-4e79-b7e4-e0fccfd6ae53
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AssetBucket
  AssetBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            Id: OpenCors
            MaxAge: '3600'
  SampleBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: AssetBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: AssetBucket
                  - /*
            Principal: "*"
  AssetCDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt
              - AssetBucket
              - DomainName
            Id: !Ref AssetBucket
            S3OriginConfig: {}
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Ref AssetBucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: /error-pages/404.html
            ResponseCode: '200'
            ErrorCachingMinTTL: '30'
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
    DependsOn:
      - AssetBucket
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - AssetBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - AssetBucket
          - DomainName
    Description: Name of S3 bucket to hold website content
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup